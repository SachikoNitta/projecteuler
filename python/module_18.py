# 問題：最大パスの合計を求める
# 2段目からスタートし、各要素が取りうる最大値（真上の数との合計 or 左上の数との合計）を求める
# 例：
#   2段目[95, 64] を [170, 139]に置換（これにより1〜2段目の合計は再計算が不要になる）
#   3段目[17, 47, 82]を [187, 217, 221]に置換　（1〜3段目の合計は再計算が不要になる）
#   ...を最後の段まで繰り返す

def max_path_sum(triangle):
    # 2段目からスタートし、各要素が取りうる最大値を求める
    for i in range (len(triangle)):
        if i == 0:
           continue
        for j in range(len(triangle[i])):
            left_parent = triangle[i - 1][j - 1] if j > 0 else 0
            right_parent = triangle[i - 1][j] if j < len(triangle[i - 1]) else 0
            triangle[i][j] += max(left_parent, right_parent)
    
    print("最大パスの合計:", max(triangle[-1]))

if __name__ == "__main__":
    triangle = [
        [75],
        [95, 64],
        [17, 47, 82],
        [18, 35, 87, 10],
        [20, 4, 82, 47, 65],
        [19, 1, 23, 75, 3, 34],
        [88, 2, 77, 73, 7, 63, 67],
        [99, 65, 4, 28, 6, 16, 70, 92],
        [41, 41, 26, 56, 83, 40, 80, 70, 33],
        [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
        [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
        [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
        [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
        [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
        [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]
        ]

    max_path_sum(triangle)
